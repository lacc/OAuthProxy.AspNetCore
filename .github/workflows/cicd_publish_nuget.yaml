name: Build and Publish NuGet Package

on:
  push:
    branches:
      - main
    paths:
      - '**/src/**'
      - '.github/workflows/cicd_publish_nuget.yaml'


jobs:
  build:
    runs-on: ubuntu-latest
    # concurrency:
    #   group: staging_environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          .github
          src

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'  # Use the appropriate .NET version for your application

    - name: Restore dependencies
      run: dotnet restore "$GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore/OAuthProxy.AspNetCore.csproj"
  
    - name: Build
      run: dotnet build "$GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore/OAuthProxy.AspNetCore.csproj" --configuration Release --no-restore
    
    - name: Run Tests
      run: dotnet test --configuration Release --logger trx --collect:"XPlat Code Coverage" --results-directory ./test-results/${{github.run_id}} $GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore.Tests/OAuthProxy.AspNetCore.Tests.csproj
    
    - name: Pack
      run: dotnet pack "$GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore/OAuthProxy.AspNetCore.csproj" -p:PackageVersion=2.1.0-${{github.run_id}} --version-suffix "${{github.run_id}}"  --configuration Release --no-build --output ./publish

    - name: Test Report
      uses: dorny/test-reporter@v2
      if: ${{ !cancelled() }}       # run this step even if previous step failed
      with:
        name: XUnit Tests            # Name of the check run which will be created
        path: ./test-results/${{github.run_id}}/*.trx    # Path to test results
        reporter: dotnet-trx        # Format of test results

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-test-results-${{github.run_id}}
        path: ./test-results/${{github.run_id}}
        
    - name: Upload Publish Directory as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: publish-artifact
        path: ./publish

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Publish Artifact
        uses: actions/download-artifact@v4
        with:
          name: publish-artifact

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'     
      
      - name: Push generated package to GitHub registry
        run: dotnet nuget push *.nupkg -k ${{ env.NUGET_AUTH_TOKEN }} -s https://nuget.pkg.github.com/${{ env.ORGANIZATION }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
          ORGANIZATION: ${{ vars.GH_ORGANIZATION }}

      - name: Cleanup Publish Directory
        run: rm -rf ./publish
      
