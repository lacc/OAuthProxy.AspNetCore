name: Build and Publish NuGet Package

on:
  push:
    branches:
      - main
      - development
      - 'feature/**'
      - 'hotfix/**'
    paths:
      - '**/src/**'
      - '.github/workflows/cicd_publish_nuget.yaml'

permissions:
  actions: write
  contents: write
  packages: write
  attestations: write
  pull-requests: write

env:
  MAJOR_MINOR: "2.2"  # Update this when you have breaking changes (major) or new features (minor)
  PRERELEASE_LABEL: "alpha"  # Options: alpha, beta, preview, rc (release candidate)
  PUBLISH_DEVELOPMENT: "true"  # Set to "false" to skip publishing for development (non main) branches
  
jobs:
  build:
    runs-on: ubuntu-latest
    # concurrency:
    #   group: staging_environment
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          .github
          src
        fetch-depth: 1  # Shallow clone for current branch
          
    - name: Fetch main branch for version calculation
      run: |
        # Fetch main branch history for commit counting (only if not already on main)
        if [ "${{ github.ref }}" != "refs/heads/main" ]; then
          git fetch origin main --unshallow
        else
          # If we're on main, we need the full history for counting
          git fetch --unshallow
        fi
          
    - name: Calculate Version
      id: version
      run: |
        # Get the current main branch commit count for base version
        MAIN_PATCH_VERSION=$(git rev-list --count origin/main)
        MAIN_VERSION="${{ env.MAJOR_MINOR }}.${MAIN_PATCH_VERSION}"
        
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          # For main branch, use the clean version
          VERSION="${MAIN_VERSION}"
        else
          # For development/feature branches, use semantic versioning pre-release format
          # Get short commit SHA for uniqueness and traceability
          COMMIT_SHA=$(git rev-parse --short HEAD)
          # Use next patch version + configurable prerelease label + commit SHA
          NEXT_PATCH=$((MAIN_PATCH_VERSION + 1))
          DEV_VERSION="${{ env.MAJOR_MINOR }}.${NEXT_PATCH}-${{ env.PRERELEASE_LABEL }}.${COMMIT_SHA}"
          VERSION="${DEV_VERSION}"
        fi
        
        # Safety check: ensure version is not empty
        if [ -z "$VERSION" ]; then
          echo "ERROR: Version calculation failed!"
          exit 1
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "Calculated version: ${VERSION}"
        echo "Based on main version: ${MAIN_VERSION}"
        echo "Commit SHA: $(git rev-parse HEAD)"
        echo "Current branch: $(git branch --show-current)"

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'  # Use the appropriate .NET version for your application

    - name: Restore dependencies
      run: dotnet restore "$GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore/OAuthProxy.AspNetCore.csproj"
  
    - name: Build
      run: dotnet build "$GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore/OAuthProxy.AspNetCore.csproj" --configuration Release --no-restore
    
    - name: Run Tests
      run: dotnet test --configuration Release --logger trx --collect:"XPlat Code Coverage" --results-directory ./test-results/${{github.run_id}} $GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore.Tests/OAuthProxy.AspNetCore.Tests.csproj
    
    - name: Pack
      run: dotnet pack "$GITHUB_WORKSPACE/src/OAuthProxy.AspNetCore/OAuthProxy.AspNetCore.csproj" -p:PackageVersion=${{ steps.version.outputs.VERSION }} --configuration Release --no-build --output ./publish

    - name: Test Report
      uses: dorny/test-reporter@v2
      if: ${{ !cancelled() }}       # run this step even if previous step failed
      with:
        name: XUnit Tests            # Name of the check run which will be created
        path: ./test-results/${{github.run_id}}/*.trx    # Path to test results
        reporter: dotnet-trx        # Format of test results

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-test-results-${{github.run_id}}
        path: ./test-results/${{github.run_id}}
        
    - name: Upload Publish Directory as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: publish-artifact
        path: ./publish

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check if publishing is enabled
        id: should_publish
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ env.PUBLISH_DEVELOPMENT }}" == "true" ]; then
            echo "enabled=true" >> $GITHUB_OUTPUT
          else
            echo "enabled=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Download Publish Artifact
        if: steps.should_publish.outputs.enabled == 'true'
        uses: actions/download-artifact@v4
        with:
          name: publish-artifact

      - name: Setup .NET Core
        if: steps.should_publish.outputs.enabled == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'     
      
      - name: Push generated package to GitHub registry
        if: steps.should_publish.outputs.enabled == 'true'
        run: dotnet nuget push *.nupkg -k ${{ env.NUGET_AUTH_TOKEN }} -s https://nuget.pkg.github.com/${{ env.ORGANIZATION }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
          ORGANIZATION: ${{ vars.GH_ORGANIZATION }}

      - name: Cleanup Publish Directory
        if: steps.should_publish.outputs.enabled == 'true'
        run: rm -rf ./publish
      
